import os
from datetime import datetime, date, timedelta
from flask import Flask, render_template, request, redirect, url_for, jsonify, send_from_directory, session
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_bcrypt import Bcrypt
from werkzeug.utils import secure_filename

basedir = os.path.abspath(os.path.dirname(__file__))
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'todo.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'a-very-hard-to-guess-secret-key'
app.config['UPLOAD_FOLDER'] = os.path.join(basedir, 'uploads')
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
login_manager.login_message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.'

TRANSLATIONS = {
    "ru": {
        "title": "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á",
        "header_tasks": "–ú–æ–∏ –∑–∞–¥–∞—á–∏",
        "header_archive": "–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á",
        "header_analytics": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "auth_login_title": "–í—Ö–æ–¥",
        "auth_register_title": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "username": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "password": "–ü–∞—Ä–æ–ª—å",
        "login_btn": "–í–æ–π—Ç–∏",
        "register_btn": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        "no_account": "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?",
        "have_account": "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?",
        "placeholder_desc": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
        "label_priority": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        "priority_high": "–í—ã—Å–æ–∫–∏–π",
        "priority_medium": "–°—Ä–µ–¥–Ω–∏–π",
        "priority_low": "–ù–∏–∑–∫–∏–π",
        "label_tags": "–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        "placeholder_tags": "—Ä–∞–±–æ—Ç–∞, —É—á–µ–±–∞",
        "label_deadline": "–î–µ–¥–ª–∞–π–Ω:",
        "label_attachment": "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª:",
        "add_task_btn": "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
        "filter_search_placeholder": "–ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º...",
        "filter_all_statuses": "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã",
        "filter_active": "–ê–∫—Ç–∏–≤–Ω—ã–µ",
        "filter_completed": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
        "filter_all_tags": "–í—Å–µ —Ç–µ–≥–∏",
        "filter_search_btn": "üîç",
        "filter_reset_btn": "–°–±—Ä–æ—Å–∏—Ç—å",
        "attachment_link": "üìé –§–∞–π–ª",
        "deadline_overdue": "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ",
        "deadline_today": "–°–µ–≥–æ–¥–Ω—è",
        "deadline_days_left": "–û—Å—Ç–∞–ª–æ—Å—å",
        "days_unit": "–¥–Ω.",
        "user_controls_analytics": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "user_controls_archive": "–ê—Ä—Ö–∏–≤",
        "user_controls_logout": "–í—ã–π—Ç–∏",
        "archive_restore_btn": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
        "archive_delete_forever_btn": "–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞",
        "archive_back_link": "–ö –∑–∞–¥–∞—á–∞–º ‚Ü©Ô∏è",
        "stats_this_week": "–∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ",
        "stats_this_month": "–∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
        "stats_header": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
        "chart_label": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    },
    "en": {
        "title": "Task Manager",
        "header_tasks": "My Tasks",
        "header_archive": "Task Archive",
        "header_analytics": "Analytics",
        "auth_login_title": "Login",
        "auth_register_title": "Register",
        "username": "Username",
        "password": "Password",
        "login_btn": "Login",
        "register_btn": "Register",
        "no_account": "No account?",
        "have_account": "Already have an account?",
        "placeholder_desc": "Task description",
        "label_priority": "Priority:",
        "priority_high": "High",
        "priority_medium": "Medium",
        "priority_low": "Low",
        "label_tags": "Tags (comma-separated):",
        "placeholder_tags": "work, study",
        "label_deadline": "Deadline:",
        "label_attachment": "Attach file:",
        "add_task_btn": "Add Task",
        "filter_search_placeholder": "Search tasks...",
        "filter_all_statuses": "All statuses",
        "filter_active": "Active",
        "filter_completed": "Completed",
        "filter_all_tags": "All tags",
        "filter_search_btn": "üîç",
        "filter_reset_btn": "Reset",
        "attachment_link": "üìé File",
        "deadline_overdue": "Overdue by",
        "deadline_today": "Today",
        "deadline_days_left": "days left",
        "days_unit": "d.",
        "user_controls_analytics": "Analytics",
        "user_controls_archive": "Archive",
        "user_controls_logout": "Logout",
        "archive_restore_btn": "Restore",
        "archive_delete_forever_btn": "Delete permanently",
        "archive_back_link": "To tasks ‚Ü©Ô∏è",
        "stats_this_week": "tasks completed this week",
        "stats_this_month": "tasks completed this month",
        "stats_header": "Activity in the last 30 days",
        "chart_label": "Completed tasks"
    }
}

def get_text(lang, key):
    return TRANSLATIONS.get(lang, TRANSLATIONS['ru']).get(key, key)

@app.context_processor
def inject_globals():
    return dict(
        lang=session.get('lang', 'ru'),
        theme=session.get('theme', 'light'),
        get_text=get_text
    )

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    tasks = db.relationship('Task', backref='owner', lazy=True)

    def set_password(self, password):
        self.password_hash = bcrypt.generate_password_hash(password).decode('utf8')

    def check_password(self, password):
        return bcrypt.check_password_hash(self.password_hash, password)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

task_tags = db.Table('task_tags',
    db.Column('task_id', db.Integer, db.ForeignKey('task.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tag.id'), primary_key=True)
)

class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String(200), nullable=False)
    added = db.Column(db.DateTime, default=datetime.utcnow)
    completed_date = db.Column(db.Date, nullable=True)
    deadline = db.Column(db.Date, nullable=True)
    status = db.Column(db.String(50), default='–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
    is_archived = db.Column(db.Boolean, default=False)
    priority = db.Column(db.Integer, default=2)
    sort_order = db.Column(db.Integer, nullable=False, default=0)
    attachment_filename = db.Column(db.String(200), nullable=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    tags = db.relationship('Tag', secondary=task_tags, backref=db.backref('tasks', lazy='dynamic'))

class Tag(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True, nullable=False)

@app.route('/language/<lang>')
def set_language(lang):
    session['lang'] = lang
    return redirect(request.referrer or url_for('index'))

@app.route('/theme/<theme_name>')
def set_theme(theme_name):
    session['theme'] = theme_name
    return redirect(request.referrer or url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        if User.query.filter_by(username=username).first():
            return render_template('register.html', error='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ')
        new_user = User(username=username)
        new_user.set_password(password)
        db.session.add(new_user)
        db.session.commit()
        login_user(new_user)
        return redirect(url_for('index'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form.get('username')).first()
        if user and user.check_password(request.form.get('password')):
            login_user(user)
            return redirect(url_for('index'))
        else:
            return render_template('login.html', error='–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/')
@login_required
def index():
    query = Task.query.filter_by(is_archived=False, owner=current_user)
    search_term = request.args.get('search', '')
    status_filter = request.args.get('status', 'all')
    tag_filter_id = request.args.get('tag', type=int)

    if search_term:
        query = query.filter(Task.description.ilike(f'%{search_term}%'))
    if status_filter != 'all':
        query = query.filter_by(status=status_filter)
    if tag_filter_id and (tag := Tag.query.get(tag_filter_id)):
        query = query.with_parent(tag)

    tasks = query.order_by(Task.sort_order).all()
    all_tags = Tag.query.all()
    
    return render_template('index.html', tasks=tasks, all_tags=all_tags, today=date.today(),
                           search_term=search_term, status_filter=status_filter, tag_filter_id=tag_filter_id)

@app.route('/analytics')
@login_required
def analytics():
    today = date.today()
    start_of_week = today - timedelta(days=today.weekday())
    start_of_month = today.replace(day=1)
    
    tasks_this_week = Task.query.filter(
        Task.owner == current_user,
        Task.status == '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
        Task.completed_date >= start_of_week
    ).count()

    tasks_this_month = Task.query.filter(
        Task.owner == current_user,
        Task.status == '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
        Task.completed_date >= start_of_month
    ).count()

    last_30_days = [today - timedelta(days=i) for i in range(29, -1, -1)]
    tasks_by_day = db.session.query(
        Task.completed_date, db.func.count(Task.id)
    ).filter(
        Task.owner == current_user,
        Task.status == '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
        Task.completed_date.in_(last_30_days)
    ).group_by(Task.completed_date).all()

    completion_data = {d.strftime('%Y-%m-%d'): c for d, c in tasks_by_day}
    chart_labels = [d.strftime('%d.%m') for d in last_30_days]
    chart_data = [completion_data.get(d.strftime('%Y-%m-%d'), 0) for d in last_30_days]

    return render_template('analytics.html', tasks_this_week=tasks_this_week, tasks_this_month=tasks_this_month,
                           chart_labels=chart_labels, chart_data=chart_data)

@app.route('/add', methods=['POST'])
@login_required
def add_task():
    description = request.form.get('description')
    if not description: return redirect(url_for('index'))

    max_order = db.session.query(db.func.max(Task.sort_order)).filter_by(owner=current_user).scalar() or -1
    new_task = Task(description=description, owner=current_user, sort_order=max_order + 1)
    new_task.priority = request.form.get('priority', 2, type=int)
    if deadline_str := request.form.get('deadline'):
        new_task.deadline = datetime.strptime(deadline_str, '%Y-%m-%d').date()

    if tags_str := request.form.get('tags'):
        for name in {name.strip() for name in tags_str.split(',') if name.strip()}:
            tag = Tag.query.filter_by(name=name).first() or Tag(name=name)
            new_task.tags.append(tag)

    if 'attachment' in request.files and (file := request.files['attachment']).filename:
        filename = secure_filename(file.filename)
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        new_task.attachment_filename = filename
            
    db.session.add(new_task)
    db.session.commit()
    return redirect(url_for('index'))

@app.route('/uploads/<filename>')
@login_required
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/update_order', methods=['POST'])
@login_required
def update_order():
    task_ids = request.json.get('order', [])
    for index, task_id in enumerate(task_ids):
        if task := Task.query.filter_by(id=task_id, owner=current_user).first():
            task.sort_order = index
    db.session.commit()
    return jsonify({'status': 'success'})

@app.route('/complete/<int:task_id>')
@login_required
def complete_task(task_id):
    task = Task.query.filter_by(id=task_id, owner=current_user).first_or_404()
    task.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    task.completed_date = date.today()
    db.session.commit()
    return redirect(request.referrer or url_for('index'))

@app.route('/archive_task/<int:task_id>')
@login_required
def archive_task(task_id):
    task = Task.query.filter_by(id=task_id, owner=current_user).first_or_404()
    task.is_archived = True
    db.session.commit()
    return redirect(request.referrer or url_for('index'))

@app.route('/delete/<int:task_id>')
@login_required
def delete_task(task_id):
    task = Task.query.filter_by(id=task_id, owner=current_user).first_or_404()
    if task.attachment_filename:
        try: os.remove(os.path.join(app.config['UPLOAD_FOLDER'], task.attachment_filename))
        except OSError: pass
    db.session.delete(task)
    db.session.commit()
    return redirect(request.referrer or url_for('index'))

@app.route('/archive')
@login_required
def archive():
    archived_tasks = Task.query.filter_by(is_archived=True, owner=current_user).order_by(Task.added.desc()).all()
    return render_template('archive.html', tasks=archived_tasks)

@app.route('/restore_task/<int:task_id>')
@login_required
def restore_task(task_id):
    task = Task.query.filter_by(id=task_id, owner=current_user).first_or_404()
    task.is_archived = False
    task.status = '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
    task.completed_date = None
    db.session.commit()
    return redirect(url_for('archive'))

with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(debug=True, port=5001)